{
    "report": {
        "environment": {
            "Python": "3.8.10",
            "Platform": "Windows-10-10.0.19042-SP0"
        },
        "tests": [
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_indexing",
                "duration": 10.2054398,
                "run_index": 0,
                "setup": {
                    "name": "setup",
                    "duration": 4.9463271,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.31192370000000036,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:85: in test_indexing\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0008619000000003041,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_empty_df",
                "duration": 0.023219400000000334,
                "run_index": 1,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007052999999999088,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.021238300000000265,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:127: in test_empty_df\n    assert_index_equal(df.index, pd.Index([\"a\", \"b\"]))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005705000000002514,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_abs[int_data]",
                "duration": 3.790926500000001,
                "run_index": 2,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011506000000007788,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.788113300000001,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005119999999987357,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_abs[float_nan_data]",
                "duration": 50.59617099999999,
                "run_index": 3,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006004999999991156,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 50.594380799999996,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:185: in test_abs\n    modin_result = modin_df.abs()\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 506, in abs\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005892000000002895,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_add_prefix[int_data]",
                "duration": 3.4752803999999884,
                "run_index": 4,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005941999999947711,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.473427000000001,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:197: in test_add_prefix\n    df_equals(new_modin_df.columns, new_pandas_df.columns)\nmodin\\pandas\\test\\utils.py:538: in df_equals\n    assert_index_equal(df1, df2)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006649999999979173,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_add_prefix[float_nan_data]",
                "duration": 19.8836764,
                "run_index": 5,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005512999999979229,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.8819589,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:197: in test_add_prefix\n    df_equals(new_modin_df.columns, new_pandas_df.columns)\nmodin\\pandas\\test\\utils.py:538: in df_equals\n    assert_index_equal(df1, df2)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006149000000021942,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[plus one-int_data]",
                "duration": 3.7582206999999954,
                "run_index": 6,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008136000000007471,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.7559722999999963,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000621199999997657,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[plus one-float_nan_data]",
                "duration": 55.52104579999998,
                "run_index": 7,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006575000000026421,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 55.51914079999999,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005899999999883221,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[convert to string-int_data]",
                "duration": 3.856331099999977,
                "run_index": 8,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008708000000012817,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.8539699999999755,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006194999999991069,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[convert to string-float_nan_data]",
                "duration": 21.63478810000001,
                "run_index": 9,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006844000000114647,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.632794399999995,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006248999999911575,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[square-int_data]",
                "duration": 3.7564354999999807,
                "run_index": 10,
                "setup": {
                    "name": "setup",
                    "duration": 0.000641699999988532,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.754512900000009,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006391999999948439,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[square-float_nan_data]",
                "duration": 58.893208699999974,
                "run_index": 11,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006460999999831074,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 58.891292899999996,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006236000000114927,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[identity-int_data]",
                "duration": 3.704946999999976,
                "run_index": 12,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007430999999940013,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.702899400000007,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005613999999809494,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[identity-float_nan_data]",
                "duration": 22.438348899999994,
                "run_index": 13,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006920999999806554,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 22.436411599999985,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005531000000473796,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[return false-int_data]",
                "duration": 3.353914400000008,
                "run_index": 14,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006750000000010914,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.3520268999999985,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000537500000007185,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap[return false-float_nan_data]",
                "duration": 18.80306989999997,
                "run_index": 15,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006804999999872052,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.801101199999948,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000607700000045952,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[plus one-int_data]",
                "duration": 3.5888647999998966,
                "run_index": 16,
                "setup": {
                    "name": "setup",
                    "duration": 0.0024351999999794316,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.583377999999982,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006163999999557745,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[plus one-float_nan_data]",
                "duration": 56.47839659999994,
                "run_index": 17,
                "setup": {
                    "name": "setup",
                    "duration": 0.000873399999989033,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 56.4760215,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000628299999959836,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[convert to string-int_data]",
                "duration": 3.8557078999999703,
                "run_index": 18,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009064000000194028,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.853281699999968,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006133999999633488,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[convert to string-float_nan_data]",
                "duration": 21.211141000000055,
                "run_index": 19,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006513000000154534,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.209141700000032,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006966999999917789,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[square-int_data]",
                "duration": 3.3439548999999715,
                "run_index": 20,
                "setup": {
                    "name": "setup",
                    "duration": 0.000647299999968709,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.342082600000026,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005777000000080079,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[square-float_nan_data]",
                "duration": 54.846235200000024,
                "run_index": 21,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006979999999998654,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 54.844284500000015,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005547000000092339,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[identity-int_data]",
                "duration": 3.7086850999999683,
                "run_index": 22,
                "setup": {
                    "name": "setup",
                    "duration": 0.000683499999979631,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.7067771000000107,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005409999999983484,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[identity-float_nan_data]",
                "duration": 22.005547899999954,
                "run_index": 23,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006897999999750937,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 22.0036164,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005519000000049346,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[return false-int_data]",
                "duration": 3.2857320999999615,
                "run_index": 24,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006912999999713065,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2837397000000124,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000609800000006544,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_applymap_numeric[return false-float_nan_data]",
                "duration": 18.73219490000008,
                "run_index": 25,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007374000000481828,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.730171400000017,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000548699999967539,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_add_suffix[int_data]",
                "duration": 2.981852300000014,
                "run_index": 26,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005856000000221684,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.9800811999999723,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:246: in test_add_suffix\n    df_equals(new_modin_df.columns, new_pandas_df.columns)\nmodin\\pandas\\test\\utils.py:538: in df_equals\n    assert_index_equal(df1, df2)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000599899999997433,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_add_suffix[float_nan_data]",
                "duration": 57.017020099999854,
                "run_index": 27,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008550999999670239,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 57.01471249999997,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:246: in test_add_suffix\n    df_equals(new_modin_df.columns, new_pandas_df.columns)\nmodin\\pandas\\test\\utils.py:538: in df_equals\n    assert_index_equal(df1, df2)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005973999999469015,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_at[int_data]",
                "duration": 3.556607500000041,
                "run_index": 28,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005820000000085201,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.554881000000023,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:256: in test_at\n    df_equals(modin_df.at[0, key1], pandas_df.at[0, key1])\nmodin\\pandas\\test\\utils.py:560: in df_equals\n    np.testing.assert_almost_equal(df1, df2)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: can only be called with ndarray object\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: can only be called with ndarray object"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005625000000009095,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_at[float_nan_data]",
                "duration": 54.06099300000005,
                "run_index": 29,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007233999999698426,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 54.05893320000007,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006130000000439395,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_axes[int_data]",
                "duration": 3.4264722000001484,
                "run_index": 30,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006002000000080443,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.42474720000007,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005246000000624917,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_axes[float_nan_data]",
                "duration": 18.194804000000204,
                "run_index": 31,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006043000000772736,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.193023400000015,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005720000000337677,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_copy[int_data]",
                "duration": 2.9857083000000557,
                "run_index": 32,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005823000000191314,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.9841045000000577,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:289: in test_copy\n    assert np.array_equal(\n<__array_function__ internals>:5: in array_equal\n    ???\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:279: in method\n    return syncreq(_self, consts.HANDLE_CALLATTR, name, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nmodin\\experimental\\cloud\\rpyc_proxy.py:178: in async_request\n    return super().async_request(handler, *args, **kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:493: in async_request\n    self._async_request(handler, args, res)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:475: in _async_request\n    self._send(consts.MSG_REQUEST, seq, (handler, self._box(args)))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:233: in _send\n    data = brine.dump((msg, seq, args))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:373: in dump\n    _dump(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:188: in _undumpable\n    raise TypeError(\"cannot dump %r\" % (obj,))\nE   TypeError: cannot dump <member '____id_pack__' of 'BaseNetref' objects>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00043919999995978287,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_copy[float_nan_data]",
                "duration": 18.26855150000017,
                "run_index": 33,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005415000000539294,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.2670071,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:289: in test_copy\n    assert np.array_equal(\n<__array_function__ internals>:5: in array_equal\n    ???\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:279: in method\n    return syncreq(_self, consts.HANDLE_CALLATTR, name, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nmodin\\experimental\\cloud\\rpyc_proxy.py:178: in async_request\n    return super().async_request(handler, *args, **kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:493: in async_request\n    self._async_request(handler, args, res)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:475: in _async_request\n    self._send(consts.MSG_REQUEST, seq, (handler, self._box(args)))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:233: in _send\n    data = brine.dump((msg, seq, args))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:373: in dump\n    _dump(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:184: in _dump_tuple\n    _dump(item, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:192: in _dump\n    _dump_registry.get(type(obj), _undumpable)(obj, stream)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\brine.py:188: in _undumpable\n    raise TypeError(\"cannot dump %r\" % (obj,))\nE   TypeError: cannot dump <member '____id_pack__' of 'BaseNetref' objects>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00046140000006289483,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dtypes[int_data]",
                "duration": 3.080421099999967,
                "run_index": 34,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005689999999276552,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0786960000000363,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:309: in test_dtypes\n    df_equals(modin_df.dtypes, pandas_df.dtypes)\nmodin\\pandas\\test\\utils.py:514: in df_equals\n    df1 = to_pandas(df1)\nmodin\\utils.py:245: in to_pandas\n    return modin_obj._to_pandas()\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'Series' object has no attribute '_query_compiler'\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\series.py\", line 2160, in _to_pandas\nE       df = self._query_compiler.to_pandas()\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\generic.py\", line 5465, in __getattr__\nE       return object.__getattribute__(self, name)\nE   AttributeError: 'Series' object has no attribute '_query_compiler'"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005871000000752247,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dtypes[float_nan_data]",
                "duration": 50.39346750000004,
                "run_index": 35,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005462000000306944,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 50.39174409999998,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:309: in test_dtypes\n    df_equals(modin_df.dtypes, pandas_df.dtypes)\nmodin\\pandas\\test\\utils.py:514: in df_equals\n    df1 = to_pandas(df1)\nmodin\\utils.py:245: in to_pandas\n    return modin_obj._to_pandas()\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'Series' object has no attribute '_query_compiler'\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\series.py\", line 2160, in _to_pandas\nE       df = self._query_compiler.to_pandas()\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\generic.py\", line 5465, in __getattr__\nE       return object.__getattribute__(self, name)\nE   AttributeError: 'Series' object has no attribute '_query_compiler'"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006309999999984939,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[col1-int_data]",
                "duration": 5.801761399999805,
                "run_index": 36,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009165999999822816,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 5.799293999999918,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:318: in test_get\n    df_equals(modin_df.get(key), pandas_df.get(key))\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006341999999222026,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[col1-float_nan_data]",
                "duration": 49.12370290000001,
                "run_index": 37,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006886999999551335,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 49.121693100000016,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:318: in test_get\n    df_equals(modin_df.get(key), pandas_df.get(key))\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006324000000859087,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[col2-int_data]",
                "duration": 4.463885599999799,
                "run_index": 38,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007211999999299223,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.46177119999993,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:318: in test_get\n    df_equals(modin_df.get(key), pandas_df.get(key))\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006720000000086657,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[col2-float_nan_data]",
                "duration": 49.04712370000004,
                "run_index": 39,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011117000000240296,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 49.044219699999985,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:318: in test_get\n    df_equals(modin_df.get(key), pandas_df.get(key))\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006806000000096901,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[A-int_data]",
                "duration": 3.057717000000139,
                "run_index": 40,
                "setup": {
                    "name": "setup",
                    "duration": 0.000998800000047595,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.055177800000024,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005416000000195709,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[A-float_nan_data]",
                "duration": 18.605231400000207,
                "run_index": 41,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006897000000662956,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.60325560000001,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005964000000631131,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[B-int_data]",
                "duration": 3.071093499999961,
                "run_index": 42,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006888000000344618,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0690506999999343,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006651999999576219,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[B-float_nan_data]",
                "duration": 18.211010599999895,
                "run_index": 43,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008725000000140426,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.20871749999992,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005480999999463165,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[does not exist-int_data]",
                "duration": 4.403925400000162,
                "run_index": 44,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006739000000379747,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.4020320000000766,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005456000000094718,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get[does not exist-float_nan_data]",
                "duration": 49.616979799999854,
                "run_index": 45,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006758999999192383,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 49.61508500000002,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005429999999932988,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_True-dummy_na_True-int_data]",
                "duration": 3.1812946999999667,
                "run_index": 46,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007881999999881373,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.179107400000021,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006108999999696607,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_True-dummy_na_True-float_nan_data]",
                "duration": 551.2979074000001,
                "run_index": 47,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007799999999633656,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 551.2956785,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9890)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006689000001642853,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_True-dummy_na_False-int_data]",
                "duration": 3.642649899999924,
                "run_index": 48,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007571999999527179,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.6405858000000535,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005496999999650143,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_True-dummy_na_False-float_nan_data]",
                "duration": 549.3654418999997,
                "run_index": 49,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007937999998830492,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 549.3631512,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9826)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007031000000097265,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_True-dummy_na_None-int_data]",
                "duration": 3.688559899999973,
                "run_index": 50,
                "setup": {
                    "name": "setup",
                    "duration": 0.001109199999973498,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.685775799999874,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005657000001519918,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_True-dummy_na_None-float_nan_data]",
                "duration": 550.5440994999999,
                "run_index": 51,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007568999999421067,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 550.5419361999998,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9826)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000649500000236003,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_False-dummy_na_True-int_data]",
                "duration": 3.661010399999668,
                "run_index": 52,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007588999997096835,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.658867300000111,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006253000001379405,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_False-dummy_na_True-float_nan_data]",
                "duration": 552.4835543999993,
                "run_index": 53,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007666999999855761,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 552.4813637999996,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9954)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006571999997504463,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_False-dummy_na_False-int_data]",
                "duration": 3.6397738999994544,
                "run_index": 54,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007090999997672043,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.6377855999999156,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005701000000044587,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_False-dummy_na_False-float_nan_data]",
                "duration": 549.9995771000004,
                "run_index": 55,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007635000001755543,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 549.9973921000001,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9890)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006579999999303254,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_False-dummy_na_None-int_data]",
                "duration": 3.6495706000005157,
                "run_index": 56,
                "setup": {
                    "name": "setup",
                    "duration": 0.000798300000042218,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.647401700000046,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005723000003854395,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_False-dummy_na_None-float_nan_data]",
                "duration": 549.8611649,
                "run_index": 57,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007657000001017877,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 549.8589864999999,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9890)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006469999998444109,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_None-dummy_na_True-int_data]",
                "duration": 3.66073520000009,
                "run_index": 58,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007538999998359941,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.6586680000000342,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005594000003839028,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_None-dummy_na_True-float_nan_data]",
                "duration": 550.6321323999991,
                "run_index": 59,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007613999996465282,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 550.6299657,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9954)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006438999998863437,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_None-dummy_na_False-int_data]",
                "duration": 3.6663433999974586,
                "run_index": 60,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007548999992650351,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.664253299999473,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005802999994557467,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_None-dummy_na_False-float_nan_data]",
                "duration": 550.1906142000016,
                "run_index": 61,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007821000008334522,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 550.1884149999996,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9890)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006350000003294554,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_None-dummy_na_None-int_data]",
                "duration": 3.643307800000912,
                "run_index": 62,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007872000005590962,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.6411584999996194,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005749000001742388,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_get_dummies[drop_first_None-dummy_na_None-float_nan_data]",
                "duration": 550.9008728000008,
                "run_index": 63,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007731000005151145,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 550.8984713,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:346: in test_get_dummies\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError: DataFrame are different\nE   \nE   DataFrame shape mismatch\nE   [left]:  (256, 9890)\nE   [right]: (256, 64)"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00085529999978462,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_isna[int_data]",
                "duration": 3.650023600000168,
                "run_index": 64,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008619999998700223,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.6477672999999413,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005323000004864298,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_isna[float_nan_data]",
                "duration": 18.520091100000172,
                "run_index": 65,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005995999999868218,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.518371600000137,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005203000000619795,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_isnull[int_data]",
                "duration": 3.205025199999909,
                "run_index": 66,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005865000002813758,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.203245099999549,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006070999997973558,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_isnull[float_nan_data]",
                "duration": 18.486266500000966,
                "run_index": 67,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006262000006245216,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.484443800000008,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000570299999708368,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_append[int_data]",
                "duration": 4.278359099998852,
                "run_index": 68,
                "setup": {
                    "name": "setup",
                    "duration": 0.000596199999563396,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.276629099999809,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005375999999159831,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_append[float_nan_data]",
                "duration": 35.67416849999972,
                "run_index": 69,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006137000000308035,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 35.672322800000074,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006182999995871796,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_astype",
                "duration": 1.3725648999989062,
                "run_index": 70,
                "setup": {
                    "name": "setup",
                    "duration": 0.0004749999998239218,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.371152799999436,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:447: in test_astype\n    modin_df = pd.DataFrame(td.values, index=td.index, columns=td.columns)\nmodin\\experimental\\cloud\\meta_magic.py:155: in __new__\n    return cls.__real_cls__(*a, **kw)\nmodin\\experimental\\cloud\\rpyc_proxy.py:430: in __init__\n    __remote_end__ = remote_cls(*a, **kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: Cannot interpret 'dtype('int32')' as a data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 158, in __init__\nE       data = np.array(values, dtype=old_dtype)\nE   TypeError: Cannot interpret 'dtype('int32')' as a data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00046209999982238514,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_astype_category",
                "duration": 1.6721119000003455,
                "run_index": 71,
                "setup": {
                    "name": "setup",
                    "duration": 0.00046440000005532056,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.67075130000012,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:499: in test_astype_category\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:536: in df_equals\n    df_categories_equals(df1, df2)\nmodin\\pandas\\test\\utils.py:462: in df_categories_equals\n    assert_extension_array_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:1242: in assert_extension_array_equal\n    left_valid = np.asarray(left[~left_na].astype(object))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:279: in method\n    return syncreq(_self, consts.HANDLE_CALLATTR, name, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: issubclass() arg 1 must be a class\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 619, in _handle_callattr\nE       return self._handle_call(obj, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\arrays\\categorical.py\", line 1868, in __getitem__\nE       result = super().__getitem__(key)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\arrays\\_mixins.py\", line 228, in __getitem__\nE       key = check_array_indexer(self, key)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexers.py\", line 489, in check_array_indexer\nE       elif is_integer_dtype(dtype):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py\", line 754, in is_integer_dtype\nE       return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py\", line 1640, in _is_dtype_type\nE       elif is_list_like(arr_or_dtype):\nE     File \"pandas\\_libs\\lib.pyx\", line 1033, in pandas._libs.lib.is_list_like\nE     File \"pandas\\_libs\\lib.pyx\", line 1038, in pandas._libs.lib.c_is_list_like\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py\", line 98, in __instancecheck__\nE       return _abc_instancecheck(cls, instance)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py\", line 102, in __subclasscheck__\nE       return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004318000001148903,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_astype_category_large",
                "duration": 12.134613600000193,
                "run_index": 72,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005972999997538864,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 12.132900000000518,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:525: in test_astype_category_large\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:536: in df_equals\n    df_categories_equals(df1, df2)\nmodin\\pandas\\test\\utils.py:462: in df_categories_equals\n    assert_extension_array_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:1242: in assert_extension_array_equal\n    left_valid = np.asarray(left[~left_na].astype(object))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:279: in method\n    return syncreq(_self, consts.HANDLE_CALLATTR, name, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: issubclass() arg 1 must be a class\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 619, in _handle_callattr\nE       return self._handle_call(obj, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\arrays\\categorical.py\", line 1868, in __getitem__\nE       result = super().__getitem__(key)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\arrays\\_mixins.py\", line 228, in __getitem__\nE       key = check_array_indexer(self, key)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexers.py\", line 489, in check_array_indexer\nE       elif is_integer_dtype(dtype):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py\", line 754, in is_integer_dtype\nE       return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py\", line 1640, in _is_dtype_type\nE       elif is_list_like(arr_or_dtype):\nE     File \"pandas\\_libs\\lib.pyx\", line 1033, in pandas._libs.lib.is_list_like\nE     File \"pandas\\_libs\\lib.pyx\", line 1038, in pandas._libs.lib.c_is_list_like\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py\", line 98, in __instancecheck__\nE       return _abc_instancecheck(cls, instance)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py\", line 102, in __subclasscheck__\nE       return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005190000001675799,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_rows_int-int_data]",
                "duration": 3.0874571000003925,
                "run_index": 73,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010344000002078246,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.08474810000007,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object __array__ method not producing an array\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 939, in clip\nE       if upper is not None and np.any(np.isnan(upper)):\nE   ValueError: object __array__ method not producing an array"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000640199999907054,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_rows_int-float_nan_data]",
                "duration": 49.518543000001046,
                "run_index": 74,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006287000005613663,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 49.51664989999972,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 928, in clip\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006357000002026325,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_rows_str-int_data]",
                "duration": 3.413437599997451,
                "run_index": 75,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006682999992335681,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.411239299999579,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object __array__ method not producing an array\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 939, in clip\nE       if upper is not None and np.any(np.isnan(upper)):\nE   ValueError: object __array__ method not producing an array"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0008616999994046637,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_rows_str-float_nan_data]",
                "duration": 18.22820170000159,
                "run_index": 76,
                "setup": {
                    "name": "setup",
                    "duration": 0.000810000000456057,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.226000800000293,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 928, in clip\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005809000003864639,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_columns_int-int_data]",
                "duration": 3.208446699999513,
                "run_index": 77,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009040999993885634,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2060412000000724,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object __array__ method not producing an array\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 939, in clip\nE       if upper is not None and np.any(np.isnan(upper)):\nE   ValueError: object __array__ method not producing an array"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005973000006633811,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_columns_int-float_nan_data]",
                "duration": 18.21408110000084,
                "run_index": 78,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006315000000540749,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.212142100000165,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 928, in clip\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006760000005670008,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_columns_str-int_data]",
                "duration": 3.0607910999988235,
                "run_index": 79,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006561000000147033,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0588702999993984,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object __array__ method not producing an array\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 939, in clip\nE       if upper is not None and np.any(np.isnan(upper)):\nE   ValueError: object __array__ method not producing an array"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006085999993956648,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_clip[over_columns_str-float_nan_data]",
                "duration": 18.320665400000507,
                "run_index": 80,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007277000004251022,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.31857519999994,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:552: in test_clip\n    modin_result = modin_df.clip(None, upper, axis=axis)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 928, in clip\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006347999997160514,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop",
                "duration": 0.14376099999935832,
                "run_index": 81,
                "setup": {
                    "name": "setup",
                    "duration": 0.000452199999926961,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.1422443999999814,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:580: in test_drop\n    df_equals(modin_simple.drop([\"A\", \"B\"], axis=\"columns\"), simple[[]])\nmodin\\pandas\\test\\utils.py:522: in df_equals\n    assert (\nE   AssertionError: Empty frames have different types: <netref class 'rpyc.core.netref.type'> != <class 'pandas.core.frame.DataFrame'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006121999995229999,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_api_equivalence",
                "duration": 0.298316800000066,
                "run_index": 82,
                "setup": {
                    "name": "setup",
                    "duration": 0.00047400000039488077,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.2969011999994109,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004675999998653424,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_transpose[int_data]",
                "duration": 5.47609680000005,
                "run_index": 83,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005916000000070198,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 5.474466900000152,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004466999998840038,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_transpose[float_nan_data]",
                "duration": 30.12504870000157,
                "run_index": 84,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006399000003511901,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 30.123104300000705,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006646000001637731,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_droplevel",
                "duration": 0.09723130000020319,
                "run_index": 85,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005547000000660773,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.0956082000002425,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:700: in test_droplevel\n    df.columns = pd.MultiIndex.from_tuples(\nmodin\\experimental\\cloud\\rpyc_proxy.py:499: in __setattr__\n    setattr(self.__remote_end__, name, value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:178: in __setattr__\n    syncreq(self, consts.HANDLE_SETATTR, name, value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'slice' object has no attribute '__array__'\nE   \nE   ========= Remote Traceback (3) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 615, in _handle_setattr\nE       return self._access_attr(obj, name, (value,), \"_rpyc_setattr\", \"allow_setattr\", setattr)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 537, in _access_attr\nE       return accessor(obj, name, *args)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2418, in __setattr__\nE       object.__setattr__(self, key, value)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 262, in _set_columns\nE       self._query_compiler.columns = new_columns\nE     File \"C:\\prog\\modin\\modin\\backends\\pandas\\query_compiler.py\", line 96, in set_axis\nE       self._modin_frame.columns = cols\nE     File \"C:\\prog\\modin\\modin\\engines\\base\\frame\\data.py\", line 270, in _set_columns\nE       self.synchronize_labels(axis=1)\nE     File \"C:\\prog\\modin\\modin\\engines\\base\\frame\\data.py\", line 399, in synchronize_labels\nE       [\nE     File \"C:\\prog\\modin\\modin\\engines\\base\\frame\\data.py\", line 400, in <listcomp>\nE       [\nE     File \"C:\\prog\\modin\\modin\\engines\\base\\frame\\data.py\", line 403, in <listcomp>\nE       cols=self.columns[\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 279, in method\nE       return syncreq(_self, consts.HANDLE_CALLATTR, name, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'slice' object has no attribute '__array__'\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 619, in _handle_callattr\nE       return self._handle_call(obj, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\multi.py\", line 2045, in __getitem__\nE       new_codes = [level_codes[key] for level_codes in self.codes]\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\multi.py\", line 2045, in <listcomp>\nE       new_codes = [level_codes[key] for level_codes in self.codes]\nE     File \"C:\\prog\\modin\\modin\\experimental\\cloud\\rpyc_proxy.py\", line 213, in __array__\nE       return pickle.loads(self._remote_pickled_array(this))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\prog\\modin\\modin\\experimental\\cloud\\rpyc_proxy.py\", line 160, in sync_request\nE       return super().sync_request(handler, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'slice' object has no attribute '__array__'\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\experimental\\cloud\\rpyc_proxy.py\", line 38, in _pickled_array\nE       return pickle.dumps(obj.__array__())\nE   AttributeError: 'slice' object has no attribute '__array__'"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005136999998285319,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-last-no_duplicates]",
                "duration": 2.0590445000007094,
                "run_index": 86,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011813000000984175,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.0559714000000895,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007105000004230533,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-last-all_duplicates]",
                "duration": 11.373665600001004,
                "run_index": 87,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007887000001574052,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.371375000000626,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007132000000638072,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-last-some_duplicates]",
                "duration": 11.619827900000928,
                "run_index": 88,
                "setup": {
                    "name": "setup",
                    "duration": 0.000763300000471645,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.617555599999832,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007457000001522829,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-last-has_name_column]",
                "duration": 0.19290209999962826,
                "run_index": 89,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007862000002205605,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.19066819999989093,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006614999992962112,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-last-str_columns]",
                "duration": 11.574937699999282,
                "run_index": 90,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007327999992412515,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.572733599999992,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007385000008071074,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-last-float_nan]",
                "duration": 20.995132700001705,
                "run_index": 91,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007588000007672235,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 20.992879299999913,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007358000002568588,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-first-no_duplicates]",
                "duration": 2.1420734999983324,
                "run_index": 92,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010589999992589583,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.1392337999996016,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007217000002128771,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-first-all_duplicates]",
                "duration": 11.407725200000641,
                "run_index": 93,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007485000005544862,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.405529399999978,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006987999995544669,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-first-some_duplicates]",
                "duration": 11.58780790000219,
                "run_index": 94,
                "setup": {
                    "name": "setup",
                    "duration": 0.000781700000516139,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.585251600000447,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000992900000710506,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-first-has_name_column]",
                "duration": 0.1824387000006027,
                "run_index": 95,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008975999999165651,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.17991910000000644,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007244000007631257,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-first-str_columns]",
                "duration": 11.599314900000536,
                "run_index": 96,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011235000001761364,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.596362100000078,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007058000001052278,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-first-float_nan]",
                "duration": 21.00103229999968,
                "run_index": 97,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007888999998613144,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 20.998765000000276,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006894999996802653,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-False-no_duplicates]",
                "duration": 1.9225038000013228,
                "run_index": 98,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007830000004105386,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.920259100000294,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006787000002077548,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-False-all_duplicates]",
                "duration": 11.439392399999633,
                "run_index": 99,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007955999999467167,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.437159900000552,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:499: in df_equals\n    and df1.columns.equals(df2.columns)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:4459: in equals\n    if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:228: in is_object_dtype\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:1640: in _is_dtype_type\n    elif is_list_like(arr_or_dtype):\npandas\\_libs\\lib.pyx:1033: in pandas._libs.lib.is_list_like\n    ???\npandas\\_libs\\lib.pyx:1038: in pandas._libs.lib.c_is_list_like\n    ???\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006412999991880497,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-False-some_duplicates]",
                "duration": 11.52377179999894,
                "run_index": 100,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010613999993438483,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.520901799999592,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007472000006600865,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-False-has_name_column]",
                "duration": 0.18425219999880937,
                "run_index": 101,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007644999996045954,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.18206259999988106,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006605999997191248,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-False-str_columns]",
                "duration": 12.126625999999305,
                "run_index": 102,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008237000001827255,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 12.124308999999812,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:499: in df_equals\n    and df1.columns.equals(df2.columns)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:4459: in equals\n    if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:228: in is_object_dtype\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:1640: in _is_dtype_type\n    elif is_list_like(arr_or_dtype):\npandas\\_libs\\lib.pyx:1033: in pandas._libs.lib.is_list_like\n    ???\npandas\\_libs\\lib.pyx:1038: in pandas._libs.lib.c_is_list_like\n    ???\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006695999991279677,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[None-False-float_nan]",
                "duration": 21.27839159999985,
                "run_index": 103,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009325999999418855,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.275841599999694,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006848000002719346,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-last-no_duplicates]",
                "duration": 1.9979254000018045,
                "run_index": 104,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009615000008125207,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.99537059999966,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006318000005194335,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-last-all_duplicates]",
                "duration": 11.389397400001144,
                "run_index": 105,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007512000001952401,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.387235500000315,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006595000004381291,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-last-some_duplicates]",
                "duration": 11.513865700000679,
                "run_index": 106,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007780000005368493,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.511599499999647,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007101999999576947,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-last-has_name_column]",
                "duration": 0.1806970999996338,
                "run_index": 107,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011228000003029592,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.17780039999979635,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006510999992315192,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-last-str_columns]",
                "duration": 11.45686409999962,
                "run_index": 108,
                "setup": {
                    "name": "setup",
                    "duration": 0.001015699999697972,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.454261300000326,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005713999998988584,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-last-float_nan]",
                "duration": 19.75178869999945,
                "run_index": 109,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007566999993287027,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.74962510000023,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006502000005639275,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-first-no_duplicates]",
                "duration": 2.0280797999985225,
                "run_index": 110,
                "setup": {
                    "name": "setup",
                    "duration": 0.001207599999361264,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.024990799999614,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00067380000018602,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-first-all_duplicates]",
                "duration": 11.391608600000836,
                "run_index": 111,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008434000001216191,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.389202600000317,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007192000002760324,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-first-some_duplicates]",
                "duration": 11.4225478999997,
                "run_index": 112,
                "setup": {
                    "name": "setup",
                    "duration": 0.000750299999708659,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.420403500000248,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006438000000343891,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-first-has_name_column]",
                "duration": 0.18198209999900428,
                "run_index": 113,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008873999995557824,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.179533900000024,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006733999998687068,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-first-str_columns]",
                "duration": 11.476347700000588,
                "run_index": 114,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007511000003432855,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.474289699999645,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005558000002565677,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-first-float_nan]",
                "duration": 19.74872510000023,
                "run_index": 115,
                "setup": {
                    "name": "setup",
                    "duration": 0.001078100000086124,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.745837800000118,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007310999999390333,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-False-no_duplicates]",
                "duration": 1.9801515999997719,
                "run_index": 116,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010394999999334686,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.9773623000000953,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007102999998096493,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-False-all_duplicates]",
                "duration": 11.463499399999819,
                "run_index": 117,
                "setup": {
                    "name": "setup",
                    "duration": 0.0012161999993622885,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.460373600000821,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:499: in df_equals\n    and df1.columns.equals(df2.columns)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:4459: in equals\n    if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:228: in is_object_dtype\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:1640: in _is_dtype_type\n    elif is_list_like(arr_or_dtype):\npandas\\_libs\\lib.pyx:1033: in pandas._libs.lib.is_list_like\n    ???\npandas\\_libs\\lib.pyx:1038: in pandas._libs.lib.c_is_list_like\n    ???\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000693400000272959,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-False-some_duplicates]",
                "duration": 11.425144699998782,
                "run_index": 118,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007509999995818362,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.422942299999704,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007003999999142252,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-False-has_name_column]",
                "duration": 0.17380489999868587,
                "run_index": 119,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008143999993990292,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.17147540000041772,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007006999994700891,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-False-str_columns]",
                "duration": 11.483187299999372,
                "run_index": 120,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008010000001377193,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.480963099999826,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006221999992703786,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[string-False-float_nan]",
                "duration": 21.15825610000047,
                "run_index": 121,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008464000002277317,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.155858899999657,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007044000003588735,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-last-no_duplicates]",
                "duration": 1.8690224000010858,
                "run_index": 122,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007762000004731817,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.866911699999946,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005583000001934124,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-last-all_duplicates]",
                "duration": 12.039900799999486,
                "run_index": 123,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008146000000124332,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 12.037708400000156,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005631999993056525,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-last-some_duplicates]",
                "duration": 11.290847799999938,
                "run_index": 124,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007550999998784391,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.288774800000283,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005627999998978339,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-last-has_name_column]",
                "duration": 0.16201450000062323,
                "run_index": 125,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007574999999633292,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.1598401000001104,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006594000005861744,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-last-str_columns]",
                "duration": 11.571390999999494,
                "run_index": 126,
                "setup": {
                    "name": "setup",
                    "duration": 0.00098230000003241,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.568846299999677,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005800999997518375,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-last-float_nan]",
                "duration": 18.087125099999867,
                "run_index": 127,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007642999999006861,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.0849618000002,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006346999998640968,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-first-no_duplicates]",
                "duration": 1.9164369000009174,
                "run_index": 128,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009427000004507136,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.9139906000000337,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005608999999822117,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-first-all_duplicates]",
                "duration": 11.338762599998518,
                "run_index": 129,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010808999995788326,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.336041699999441,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005590999999185442,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-first-some_duplicates]",
                "duration": 11.350921800000833,
                "run_index": 130,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007485000005544862,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.34886490000008,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000559899999643676,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-first-has_name_column]",
                "duration": 0.16136049999931856,
                "run_index": 131,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009033999995153863,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.15884230000028765,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007114000000001397,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-first-str_columns]",
                "duration": 11.40966870000102,
                "run_index": 132,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007537000001320848,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.407597200000055,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005641000007017283,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-first-float_nan]",
                "duration": 18.25266339999871,
                "run_index": 133,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007521999996242812,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.25057259999994,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005863999995199265,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-False-no_duplicates]",
                "duration": 1.8615583000009792,
                "run_index": 134,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008187000003090361,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.8593511999997645,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005697000005966402,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-False-all_duplicates]",
                "duration": 11.459517300000698,
                "run_index": 135,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010903000002144836,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.456707899999856,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000628800000413321,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-False-some_duplicates]",
                "duration": 11.39253329999974,
                "run_index": 136,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007641000001967768,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.390452699999514,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005523999998331419,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-False-has_name_column]",
                "duration": 0.1614819999986139,
                "run_index": 137,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007619999996677507,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.15929289999985485,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006650999994235463,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-False-str_columns]",
                "duration": 11.467658899999151,
                "run_index": 138,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007821999997759121,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.465529099999912,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005653999996866332,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[name-False-float_nan]",
                "duration": 18.19486919999872,
                "run_index": 139,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007547999994130805,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.192723999999544,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006356000003506779,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-last-no_duplicates]",
                "duration": 1.9058556999989378,
                "run_index": 140,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009293999992223689,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.9032416000000012,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007553000004918431,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-last-all_duplicates]",
                "duration": 11.404943999999887,
                "run_index": 141,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007753999998385552,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.402684200000294,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007089999999152496,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-last-some_duplicates]",
                "duration": 11.443660400001136,
                "run_index": 142,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007545000007667113,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.44149379999999,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006575999996130122,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-last-has_name_column]",
                "duration": 0.19628300000113086,
                "run_index": 143,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007504000004701084,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.19405830000050628,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007238999996843631,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-last-str_columns]",
                "duration": 11.528987400000915,
                "run_index": 144,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007221000005301903,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.52698380000038,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005593999994744081,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-last-float_nan]",
                "duration": 18.3985289000002,
                "run_index": 145,
                "setup": {
                    "name": "setup",
                    "duration": 0.000758000000132597,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.396282300000166,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007305999997697654,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-first-no_duplicates]",
                "duration": 2.058272900000702,
                "run_index": 146,
                "setup": {
                    "name": "setup",
                    "duration": 0.000815100000181701,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.0558994000002713,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007433000000673928,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-first-all_duplicates]",
                "duration": 12.163854899999933,
                "run_index": 147,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007568999999421067,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 12.16162600000007,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007150999999794294,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-first-some_duplicates]",
                "duration": 11.46274799999992,
                "run_index": 148,
                "setup": {
                    "name": "setup",
                    "duration": 0.000846300000375777,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.460365799999636,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00068959999953222,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-first-has_name_column]",
                "duration": 0.17065619999902992,
                "run_index": 149,
                "setup": {
                    "name": "setup",
                    "duration": 0.000988599999800499,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.16795439999987138,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007245999995575403,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-first-str_columns]",
                "duration": 11.475872100000743,
                "run_index": 150,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007762000004731817,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.473759900000005,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005597999997917213,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-first-float_nan]",
                "duration": 18.413689299998623,
                "run_index": 151,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007460999995601014,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.41148340000018,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007136999993235804,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-False-no_duplicates]",
                "duration": 2.030758699999751,
                "run_index": 152,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011582999995880527,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.0277297000002363,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007124000003386755,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-False-all_duplicates]",
                "duration": 11.4059184000007,
                "run_index": 153,
                "setup": {
                    "name": "setup",
                    "duration": 0.0012488000002122135,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.402753800000028,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:499: in df_equals\n    and df1.columns.equals(df2.columns)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:4459: in equals\n    if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:228: in is_object_dtype\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py:1640: in _is_dtype_type\n    elif is_list_like(arr_or_dtype):\npandas\\_libs\\lib.pyx:1033: in pandas._libs.lib.is_list_like\n    ???\npandas\\_libs\\lib.pyx:1038: in pandas._libs.lib.c_is_list_like\n    ???\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006670000002486631,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-False-some_duplicates]",
                "duration": 11.562753299997894,
                "run_index": 154,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007547999994130805,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.560537899999872,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007057999991957331,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-False-has_name_column]",
                "duration": 0.1842322000002241,
                "run_index": 155,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007599999999001739,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.1820250999999189,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00068710000050487,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-False-str_columns]",
                "duration": 11.521325000000616,
                "run_index": 156,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007936000001791399,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.519173100000444,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005646999998134561,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[tuple-False-float_nan]",
                "duration": 18.26212039999973,
                "run_index": 157,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007587000000057742,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.25989490000029,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:728: in test_drop_duplicates\n    df_equals(\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007080999994286685,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-last-no_duplicates]",
                "duration": 1.8831325000001016,
                "run_index": 158,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007757000003039138,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.8810771999997087,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005038999997850624,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-last-all_duplicates]",
                "duration": 11.61141840000073,
                "run_index": 159,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007059999998091371,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.60945460000039,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005518000007214141,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-last-some_duplicates]",
                "duration": 11.48381359999803,
                "run_index": 160,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008007999995243154,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.481716599999345,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004953999996359926,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-last-has_name_column]",
                "duration": 0.1759658999999374,
                "run_index": 161,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007034000000203378,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.174039300000004,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005197999998927116,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-last-str_columns]",
                "duration": 11.480326599999898,
                "run_index": 162,
                "setup": {
                    "name": "setup",
                    "duration": 0.001040899999679823,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.477695500000664,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:723: in test_drop_duplicates\n    pandas_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5271: in drop_duplicates\n    duplicated = self.duplicated(subset, keep=keep)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5405: in duplicated\n    raise KeyError(diff)\nE   KeyError: Index(['col1', 'col3', 'col7'], dtype='object')\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:726: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\prog\\modin\\modin\\pandas\\test\\dataframe\\test_map_metadata.py\", line 723, in test_drop_duplicates\nE       pandas_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py\", line 5271, in drop_duplicates\nE       duplicated = self.duplicated(subset, keep=keep)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py\", line 5405, in duplicated\nE       raise KeyError(diff)\nE   KeyError: Index(['col1', 'col3', 'col7'], dtype='object')\nE   \nE   During handling of the above exception, another exception occurred:\nE   \nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005492999998750747,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-last-float_nan]",
                "duration": 18.30363099999977,
                "run_index": 163,
                "setup": {
                    "name": "setup",
                    "duration": 0.001153100000010454,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.30057409999972,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007507000000259723,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-first-no_duplicates]",
                "duration": 1.8651048999981867,
                "run_index": 164,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008077999991655815,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.862958300000173,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005309999996825354,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-first-all_duplicates]",
                "duration": 11.497124500001519,
                "run_index": 165,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007412000004478614,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.495098500000495,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005436000001282082,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-first-some_duplicates]",
                "duration": 11.407354299999497,
                "run_index": 166,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010537999996813596,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.404739800000243,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000506899999891175,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-first-has_name_column]",
                "duration": 0.17681359999915003,
                "run_index": 167,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008142999995470745,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.17464230000041425,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005426999996416271,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-first-str_columns]",
                "duration": 11.686715600000753,
                "run_index": 168,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007475000002159504,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.684417899999971,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:723: in test_drop_duplicates\n    pandas_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5271: in drop_duplicates\n    duplicated = self.duplicated(subset, keep=keep)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5405: in duplicated\n    raise KeyError(diff)\nE   KeyError: Index(['col1', 'col3', 'col7'], dtype='object')\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:726: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\prog\\modin\\modin\\pandas\\test\\dataframe\\test_map_metadata.py\", line 723, in test_drop_duplicates\nE       pandas_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py\", line 5271, in drop_duplicates\nE       duplicated = self.duplicated(subset, keep=keep)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py\", line 5405, in duplicated\nE       raise KeyError(diff)\nE   KeyError: Index(['col1', 'col3', 'col7'], dtype='object')\nE   \nE   During handling of the above exception, another exception occurred:\nE   \nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0008027000003494322,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-first-float_nan]",
                "duration": 18.289591400000063,
                "run_index": 169,
                "setup": {
                    "name": "setup",
                    "duration": 0.000781700000516139,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.287447299999258,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00058069999977306,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-False-no_duplicates]",
                "duration": 1.9683764999999767,
                "run_index": 170,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007779999996273546,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 1.966312100000323,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005084000003989786,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-False-all_duplicates]",
                "duration": 12.242888300001141,
                "run_index": 171,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007733000002190238,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 12.240781000000425,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005607000002783025,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-False-some_duplicates]",
                "duration": 11.352271499999006,
                "run_index": 172,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007471999997505918,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.35021609999967,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005609999998341664,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-False-has_name_column]",
                "duration": 0.17684300000018993,
                "run_index": 173,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007411000005959067,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.17479939999975613,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005613999992419849,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-False-str_columns]",
                "duration": 11.659055699999954,
                "run_index": 174,
                "setup": {
                    "name": "setup",
                    "duration": 0.001051999999617692,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 11.656472000000576,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:723: in test_drop_duplicates\n    pandas_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5271: in drop_duplicates\n    duplicated = self.duplicated(subset, keep=keep)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5405: in duplicated\n    raise KeyError(diff)\nE   KeyError: Index(['col1', 'col3', 'col7'], dtype='object')\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:726: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\prog\\modin\\modin\\pandas\\test\\dataframe\\test_map_metadata.py\", line 723, in test_drop_duplicates\nE       pandas_df.drop_duplicates(keep=keep, inplace=False, subset=subset)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py\", line 5271, in drop_duplicates\nE       duplicated = self.duplicated(subset, keep=keep)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py\", line 5405, in duplicated\nE       raise KeyError(diff)\nE   KeyError: Index(['col1', 'col3', 'col7'], dtype='object')\nE   \nE   During handling of the above exception, another exception occurred:\nE   \nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004797000001417473,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates[list-False-float_nan]",
                "duration": 18.227437500001543,
                "run_index": 175,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007221000005301903,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.225457900000038,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:730: in test_drop_duplicates\n    modin_df.drop_duplicates(keep=keep, inplace=False, subset=subset),\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000535400000444497,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates_with_missing_index_values",
                "duration": 0.2466601999994964,
                "run_index": 176,
                "setup": {
                    "name": "setup",
                    "duration": 0.0004579999995257822,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.24525420000009035,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:818: in test_drop_duplicates_with_missing_index_values\n    modin_result = modin_df.sort_values([\"id\", \"time\"]).drop_duplicates([\"id\"])\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004900000003544847,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_drop_duplicates_after_sort",
                "duration": 0.12741550000009738,
                "run_index": 177,
                "setup": {
                    "name": "setup",
                    "duration": 0.000465299999632407,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.12600970000039524,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:833: in test_drop_duplicates_after_sort\n    modin_result = modin_df.sort_values([\"value\", \"time\"]).drop_duplicates([\"value\"])\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (2) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 279, in drop_duplicates\nE       return super(DataFrame, self).drop_duplicates(\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 1207, in drop_duplicates\nE       duplicates = self.duplicated(keep=keep, subset=subset)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 296, in duplicated\nE       df = self[subset] if subset is not None else self\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2847, in __getitem__\nE       return self._getitem(key)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2891, in _getitem\nE       key = apply_if_callable(key, self)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py\", line 329, in apply_if_callable\nE       return maybe_callable(obj, **kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 253, in __call__\nE       return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py\", line 76, in syncreq\nE       return conn.sync_request(handler, proxy, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 469, in sync_request\nE       return self.async_request(handler, *args, timeout=timeout).value\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py\", line 102, in value\nE       raise self._obj\nE   _get_exception_class.<locals>.Derived: 'list' object is not callable\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE   TypeError: 'list' object is not callable"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0004752000004373258,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_rows_int-int_data]",
                "duration": 3.2555952000002435,
                "run_index": 178,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007863000000725151,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2534433000000718,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005793000000267057,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_rows_int-float_nan_data]",
                "duration": 19.687904700000217,
                "run_index": 179,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007587000000057742,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.685815300000286,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005719999999200809,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_rows_str-int_data]",
                "duration": 3.210407900000064,
                "run_index": 180,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007604000002174871,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2082721999995556,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006149000000732485,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_rows_str-float_nan_data]",
                "duration": 19.567667700001948,
                "run_index": 181,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008356000007552211,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.56541600000037,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005805000000691507,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_columns_int-int_data]",
                "duration": 3.237712499999361,
                "run_index": 182,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007562000000689295,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2355969000000186,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006031999992046622,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_columns_int-float_nan_data]",
                "duration": 18.39859559999877,
                "run_index": 183,
                "setup": {
                    "name": "setup",
                    "duration": 0.00076699999954144,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.396337199999834,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:856: in test_dropna\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:522: in df_equals\n    assert (\nE   AssertionError: Empty frames have different types: <netref class 'rpyc.core.netref.type'> != <class 'pandas.core.frame.DataFrame'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000724399999853631,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_columns_str-int_data]",
                "duration": 3.195451300000059,
                "run_index": 184,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007524000002376852,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.193330600000081,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006158999995022896,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[any-over_columns_str-float_nan_data]",
                "duration": 18.317997899999682,
                "run_index": 185,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007539999996879487,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.31585819999964,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:856: in test_dropna\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:522: in df_equals\n    assert (\nE   AssertionError: Empty frames have different types: <netref class 'rpyc.core.netref.type'> != <class 'pandas.core.frame.DataFrame'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006317000006674789,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_rows_int-int_data]",
                "duration": 3.212307200000396,
                "run_index": 186,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007845999998608022,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2101642000006905,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005737999999837484,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_rows_int-float_nan_data]",
                "duration": 21.789538499999253,
                "run_index": 187,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007626999995409278,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.78738539999995,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006277000002228306,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_rows_str-int_data]",
                "duration": 3.2160899000000427,
                "run_index": 188,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009922999997797888,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.213539200000014,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005661000004693051,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_rows_str-float_nan_data]",
                "duration": 21.663739200001146,
                "run_index": 189,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009994000001825043,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.661194400000568,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005460000002130982,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_columns_int-int_data]",
                "duration": 3.187352000001738,
                "run_index": 190,
                "setup": {
                    "name": "setup",
                    "duration": 0.000776600000790495,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.1851728999999978,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000625900000159163,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_columns_int-float_nan_data]",
                "duration": 21.51239180000084,
                "run_index": 191,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010657000002538553,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.509686299999885,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000574100000449107,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_columns_str-int_data]",
                "duration": 3.2329212000013285,
                "run_index": 192,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007712000005994923,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.230771200000163,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006075999999666237,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna[all-over_columns_str-float_nan_data]",
                "duration": 21.512268000000404,
                "run_index": 193,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007572000004074653,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 21.510066599999845,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006869999997434206,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_inplace[int_data]",
                "duration": 9.62133090000043,
                "run_index": 194,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005891000000701752,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 9.619629100000566,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000523599999723956,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_inplace[float_nan_data]",
                "duration": 59.9245832000006,
                "run_index": 195,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005963000003248453,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 59.92274840000027,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:877: in test_dropna_inplace\n    df_equals(modin_df, pandas_df)\nmodin\\pandas\\test\\utils.py:522: in df_equals\n    assert (\nE   AssertionError: Empty frames have different types: <netref class 'rpyc.core.netref.type'> != <class 'pandas.core.frame.DataFrame'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006421999996746308,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_multiple_axes[int_data]",
                "duration": 3.1013663999992787,
                "run_index": 196,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005774999999630381,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.099692299999333,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005191000000195345,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_multiple_axes[float_nan_data]",
                "duration": 18.26069070000085,
                "run_index": 197,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005908000002818881,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.258988900000077,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005202000002100249,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_subset[int_data]",
                "duration": 3.0077018999991196,
                "run_index": 198,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005788999997093924,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0058970999998564,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:899: in test_dropna_subset\n    pandas_df.dropna(how=\"all\", subset=column_subset),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5159: in dropna\n    indices = ax.get_indexer_for(subset)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:4961: in get_indexer_for\n    return self.get_indexer(target, **kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3166: in get_indexer\n    target = target.astype(object)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: Cannot interpret '<class 'object'>' as a data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 690, in astype\nE       dtype = pandas_dtype(dtype)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py\", line 1799, in pandas_dtype\nE       npdtype = np.dtype(dtype)\nE   TypeError: Cannot interpret '<class 'object'>' as a data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006469999998444109,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_subset[float_nan_data]",
                "duration": 18.543383000001086,
                "run_index": 199,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005442000001494307,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.5417350000007,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:899: in test_dropna_subset\n    pandas_df.dropna(how=\"all\", subset=column_subset),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:5159: in dropna\n    indices = ax.get_indexer_for(subset)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:4961: in get_indexer_for\n    return self.get_indexer(target, **kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3166: in get_indexer\n    target = target.astype(object)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: Cannot interpret '<class 'object'>' as a data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 690, in astype\nE       dtype = pandas_dtype(dtype)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\common.py\", line 1799, in pandas_dtype\nE       npdtype = np.dtype(dtype)\nE   TypeError: Cannot interpret '<class 'object'>' as a data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005596000000878121,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_subset_error[0-subset0-int_data]",
                "duration": 2.989589600000727,
                "run_index": 200,
                "setup": {
                    "name": "setup",
                    "duration": 0.001022700000248733,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.9869699000000764,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005743000001530163,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_subset_error[0-subset0-float_nan_data]",
                "duration": 18.319159599998784,
                "run_index": 201,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007581999998365063,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.31707599999936,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005671999997503008,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_subset_error[1-subset1-int_data]",
                "duration": 3.2012417000014466,
                "run_index": 202,
                "setup": {
                    "name": "setup",
                    "duration": 0.0010090000005220645,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.1986124000004565,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006112999999459134,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_dropna_subset_error[1-subset1-float_nan_data]",
                "duration": 20.96276350000153,
                "run_index": 203,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007557000008091563,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 20.96061660000032,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006354999995892285,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_dtypes[category-int_data]",
                "duration": 3.0130309000014677,
                "run_index": 204,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006730000004608883,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0111385999998674,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005463000006784569,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_dtypes[category-float_nan_data]",
                "duration": 18.396291200000633,
                "run_index": 205,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006760000005670008,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.394403299999794,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005358999997042702,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_dtypes[int32-int_data]",
                "duration": 2.9977353000012954,
                "run_index": 206,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006931000007170951,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 2.9957973000000493,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005517999998119194,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_dtypes[int32-float_nan_data]",
                "duration": 18.400658299999122,
                "run_index": 207,
                "setup": {
                    "name": "setup",
                    "duration": 0.000676499999826774,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.398536099999546,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007691999999224208,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_dtypes[float-int_data]",
                "duration": 3.0035805000006803,
                "run_index": 208,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009711000002425862,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.001086999999643,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005513000005521462,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_dtypes[float-float_nan_data]",
                "duration": 18.491465599999174,
                "run_index": 209,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006777999997211737,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.489558000000216,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005519999995158287,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_-5-int_data]",
                "duration": 3.040880799999286,
                "run_index": 210,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006734999997206614,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0389845999998215,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005492000000231201,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_-5-float_nan_data]",
                "duration": 18.391609700000117,
                "run_index": 211,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007795999999871128,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.38934859999972,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007019000004220288,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_-1-int_data]",
                "duration": 3.0066275999988648,
                "run_index": 212,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006746999997631065,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0047294999994847,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005486999998538522,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_-1-float_nan_data]",
                "duration": 18.42411439999978,
                "run_index": 213,
                "setup": {
                    "name": "setup",
                    "duration": 0.000680600000123377,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.422188800000185,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005643999993480975,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_0-int_data]",
                "duration": 3.0098080999996455,
                "run_index": 214,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006757000001016422,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.007827399999769,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\utils.py:666: in execute_callable\n    pd_result = fn(pandas_df, **pd_kwargs)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:66: in <lambda>\n    operation=lambda df, **kwargs: df.insert(**kwargs),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3762: in insert\n    value = self._sanitize_column(column, value, broadcast=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3904: in _sanitize_column\n    value = com.asarray_tuplesafe(value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py:208: in asarray_tuplesafe\n    result = np.asarray(values, dtype=dtype)\nE   ValueError: object __array__ method not producing an array\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:946: in test_insert_loc\n    eval_insert(modin_df, pandas_df, loc=loc, value=value)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:63: in eval_insert\n    eval_general(\nmodin\\pandas\\test\\utils.py:705: in eval_general\n    values = execute_callable(\nmodin\\pandas\\test\\utils.py:672: in execute_callable\n    repr(fn(modin_df, **md_kwargs))\nE   Failed: DID NOT RAISE <class 'Exception'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006292999996730941,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_0-float_nan_data]",
                "duration": 18.394628900000498,
                "run_index": 215,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006272999999055173,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.392719400000715,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\utils.py:666: in execute_callable\n    pd_result = fn(pandas_df, **pd_kwargs)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:66: in <lambda>\n    operation=lambda df, **kwargs: df.insert(**kwargs),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3762: in insert\n    value = self._sanitize_column(column, value, broadcast=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3904: in _sanitize_column\n    value = com.asarray_tuplesafe(value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py:208: in asarray_tuplesafe\n    result = np.asarray(values, dtype=dtype)\nE   ValueError: object __array__ method not producing an array\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:946: in test_insert_loc\n    eval_insert(modin_df, pandas_df, loc=loc, value=value)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:63: in eval_insert\n    eval_general(\nmodin\\pandas\\test\\utils.py:705: in eval_general\n    values = execute_callable(\nmodin\\pandas\\test\\utils.py:672: in execute_callable\n    repr(fn(modin_df, **md_kwargs))\nE   Failed: DID NOT RAISE <class 'Exception'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006548999999722582,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_1-int_data]",
                "duration": 3.0667381000002933,
                "run_index": 216,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006266999998842948,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.064874900000177,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\utils.py:666: in execute_callable\n    pd_result = fn(pandas_df, **pd_kwargs)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:66: in <lambda>\n    operation=lambda df, **kwargs: df.insert(**kwargs),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3762: in insert\n    value = self._sanitize_column(column, value, broadcast=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3904: in _sanitize_column\n    value = com.asarray_tuplesafe(value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py:208: in asarray_tuplesafe\n    result = np.asarray(values, dtype=dtype)\nE   ValueError: object __array__ method not producing an array\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:946: in test_insert_loc\n    eval_insert(modin_df, pandas_df, loc=loc, value=value)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:63: in eval_insert\n    eval_general(\nmodin\\pandas\\test\\utils.py:705: in eval_general\n    values = execute_callable(\nmodin\\pandas\\test\\utils.py:672: in execute_callable\n    repr(fn(modin_df, **md_kwargs))\nE   Failed: DID NOT RAISE <class 'Exception'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006098000003476045,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_1-float_nan_data]",
                "duration": 18.93353070000103,
                "run_index": 217,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006847000004199799,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.931541400000242,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\utils.py:666: in execute_callable\n    pd_result = fn(pandas_df, **pd_kwargs)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:66: in <lambda>\n    operation=lambda df, **kwargs: df.insert(**kwargs),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3762: in insert\n    value = self._sanitize_column(column, value, broadcast=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3904: in _sanitize_column\n    value = com.asarray_tuplesafe(value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py:208: in asarray_tuplesafe\n    result = np.asarray(values, dtype=dtype)\nE   ValueError: object __array__ method not producing an array\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:946: in test_insert_loc\n    eval_insert(modin_df, pandas_df, loc=loc, value=value)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:63: in eval_insert\n    eval_general(\nmodin\\pandas\\test\\utils.py:705: in eval_general\n    values = execute_callable(\nmodin\\pandas\\test\\utils.py:672: in execute_callable\n    repr(fn(modin_df, **md_kwargs))\nE   Failed: DID NOT RAISE <class 'Exception'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006198999999469379,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_5-int_data]",
                "duration": 3.146500699999706,
                "run_index": 218,
                "setup": {
                    "name": "setup",
                    "duration": 0.000625900000159163,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.144687399999384,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\utils.py:666: in execute_callable\n    pd_result = fn(pandas_df, **pd_kwargs)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:66: in <lambda>\n    operation=lambda df, **kwargs: df.insert(**kwargs),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3762: in insert\n    value = self._sanitize_column(column, value, broadcast=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3904: in _sanitize_column\n    value = com.asarray_tuplesafe(value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py:208: in asarray_tuplesafe\n    result = np.asarray(values, dtype=dtype)\nE   ValueError: object __array__ method not producing an array\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:946: in test_insert_loc\n    eval_insert(modin_df, pandas_df, loc=loc, value=value)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:63: in eval_insert\n    eval_general(\nmodin\\pandas\\test\\utils.py:705: in eval_general\n    values = execute_callable(\nmodin\\pandas\\test\\utils.py:672: in execute_callable\n    repr(fn(modin_df, **md_kwargs))\nE   Failed: DID NOT RAISE <class 'Exception'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005615000000034343,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert_loc[loc_5-float_nan_data]",
                "duration": 18.543626599999698,
                "run_index": 219,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008195000000341679,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.541064900000492,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\utils.py:666: in execute_callable\n    pd_result = fn(pandas_df, **pd_kwargs)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:66: in <lambda>\n    operation=lambda df, **kwargs: df.insert(**kwargs),\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3762: in insert\n    value = self._sanitize_column(column, value, broadcast=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\frame.py:3904: in _sanitize_column\n    value = com.asarray_tuplesafe(value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\common.py:208: in asarray_tuplesafe\n    result = np.asarray(values, dtype=dtype)\nE   ValueError: object __array__ method not producing an array\n\nDuring handling of the above exception, another exception occurred:\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:946: in test_insert_loc\n    eval_insert(modin_df, pandas_df, loc=loc, value=value)\nmodin\\pandas\\test\\dataframe\\test_map_metadata.py:63: in eval_insert\n    eval_general(\nmodin\\pandas\\test\\utils.py:705: in eval_general\n    values = execute_callable(\nmodin\\pandas\\test\\utils.py:672: in execute_callable\n    repr(fn(modin_df, **md_kwargs))\nE   Failed: DID NOT RAISE <class 'Exception'>"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0009226999991369667,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert[int_data]",
                "duration": 3.276103400001375,
                "run_index": 220,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008099000006041024,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2739590000001044,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005246000000624917,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_insert[float_nan_data]",
                "duration": 10804.624781899998,
                "run_index": 221,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005909999999857973,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 10804.621485699998,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:951: in test_insert\n    modin_df, pandas_df = pd.DataFrame(data), pandas.DataFrame(data)\nmodin\\experimental\\cloud\\meta_magic.py:155: in __new__\n    return cls.__real_cls__(*a, **kw)\nmodin\\experimental\\cloud\\rpyc_proxy.py:430: in __init__\n    __remote_end__ = remote_cls(*a, **kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:100: in value\n    self.wait()\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:49: in wait\n    raise AsyncResultTimeout(\"result expired\")\nE   TimeoutError: result expired"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0021142000005056616,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_ndim[int_data]",
                "duration": 4.39614320000328,
                "run_index": 222,
                "setup": {
                    "name": "setup",
                    "duration": 0.0011329000008117873,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.392658200002188,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.001219199999468401,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_ndim[float_nan_data]",
                "duration": 17225.6742732,
                "run_index": 223,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008544999982404988,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 17225.6719763,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1007: in test_ndim\n    modin_df = pd.DataFrame(data)\nmodin\\experimental\\cloud\\meta_magic.py:155: in __new__\n    return cls.__real_cls__(*a, **kw)\nmodin\\experimental\\cloud\\rpyc_proxy.py:430: in __init__\n    __remote_end__ = remote_cls(*a, **kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:100: in value\n    self.wait()\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:49: in wait\n    raise AsyncResultTimeout(\"result expired\")\nE   TimeoutError: result expired"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005879000018467195,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_notna[int_data]",
                "duration": 5.014782600002945,
                "run_index": 224,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007772000026307069,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 5.012660799999139,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005673999985447153,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_notna[float_nan_data]",
                "duration": 22.963482300001488,
                "run_index": 225,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006884000031277537,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 22.961550899999565,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005545999956666492,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_notnull[int_data]",
                "duration": 3.3307660999998916,
                "run_index": 226,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006066999994800426,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.3289813000010327,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005713999998988584,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_notnull[float_nan_data]",
                "duration": 20.867185200004315,
                "run_index": 227,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005955000015092082,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 20.86546190000081,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005323000004864298,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_round[int_data]",
                "duration": 4.002528999990318,
                "run_index": 228,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006617999970330857,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.00064669999847,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005586999977822416,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_round[float_nan_data]",
                "duration": 19.362906499998644,
                "run_index": 229,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008973000003607012,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.360468999999284,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1034: in test_round\n    df_equals(modin_df.round(), pandas_df.round())\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nmodin\\conftest.py:92: in wrapper\n    return func(\nmodin\\conftest.py:92: in wrapper\n    return func(\npandas\\_libs\\testing.pyx:46: in pandas._libs.testing.assert_almost_equal\n    ???\npandas\\_libs\\testing.pyx:161: in pandas._libs.testing.assert_almost_equal\n    ???\nE   AssertionError: DataFrame.iloc[:, 0] (column name=\"col33\") are different\nE   \nE   DataFrame.iloc[:, 0] (column name=\"col33\") values are different (96.875 %)\nE   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\nE   [left]:  [nan, 17.91192841569551, 10.325880943608256, 5.208790692715093, 43.60415829129502, 62.31473673359569, 84.05533567512641, 68.26448822931313, 20.836078907485735, 46.1770366396279, 91.03463463086553, 32.67410624773712, 49.87303650919315, 95.85653346436968, 73.47080055736977, 74.7740385641692, nan, 41.46981183051282, 8.23421630967217, 60.652586705053366, 10.373016454249417, 83.59095822059548, 81.45537870199968, 53.360510112230955, 14.11660331970297, 2.557898319516816, 79.67086675425725, 60.014048321342685, 71.09296367478834, 30.38071257363676, 50.94827378439145, 74.71741705396504, nan, 60.138422276873094, 78.97282618079623, 21.522064526637884, 6.592888935748231, 53.18235108108051, 6.212577072009573, 76.65572943667533, 71.92114476337886, 88.1712671465297, 63.95620980339606, 6.719757075237376, 25.31521254896174, 80.79318445627193, 16.713241731358774, 69.84804678148873, nan, 33.011179785524114, 32.22974734029085, 55.78026812091469, 86.12863327547637, 22.390620191348056, 94.12581960424026, 59.911868482010824, 99.21264713522761, 8.961372399532264, 12.656213650675907, 82.66418037134827, 86.47558956038492, 44.545868837093394, 71.4071176142335, 86.75572874455385, nan, 57.39504229932586, 85.34806665264895, 39.815494458477495, 30.238360611242687, 79.57066850948375, 33.57865835028362, 0.31742981845032103, 95.95725876290658, 59.212323635101846, 81.95179187100712, 82.53015623427146, 6.641042037273282, 17.08601993864648, 31.11206807596474, 32.069928504132285, nan, 62.31329207526848, 49.45897780098137, 21.126373230876794, 38.19834696903034, 54.35939684651695, 46.798536610394194, 12.729253309507838, 64.95104935019238, 7.305177681066056, 37.81946830810803, 71.0029347675229, 2.002353451970651, 56.99828190453161, 33.45209741432973, 0.8831843422734464, nan, 94.09461932706544, 52.11489055050904, 99.72272046291317, ...]\nE   [right]: [nan, 18.0, 10.0, 5.0, 44.0, 62.0, 84.0, 68.0, 21.0, 46.0, 91.0, 33.0, 50.0, 96.0, 73.0, 75.0, nan, 41.0, 8.0, 61.0, 10.0, 84.0, 81.0, 53.0, 14.0, 3.0, 80.0, 60.0, 71.0, 30.0, 51.0, 75.0, nan, 60.0, 79.0, 22.0, 7.0, 53.0, 6.0, 77.0, 72.0, 88.0, 64.0, 7.0, 25.0, 81.0, 17.0, 70.0, nan, 33.0, 32.0, 56.0, 86.0, 22.0, 94.0, 60.0, 99.0, 9.0, 13.0, 83.0, 86.0, 45.0, 71.0, 87.0, nan, 57.0, 85.0, 40.0, 30.0, 80.0, 34.0, 0.0, 96.0, 59.0, 82.0, 83.0, 7.0, 17.0, 31.0, 32.0, nan, 62.0, 49.0, 21.0, 38.0, 54.0, 47.0, 13.0, 65.0, 7.0, 38.0, 71.0, 2.0, 57.0, 33.0, 1.0, nan, 94.0, 52.0, 100.0, ...]"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006428999986383133,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_rows_int-int_data]",
                "duration": 4.188699999998789,
                "run_index": 230,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006586000017705373,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.186734199996863,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006485999983851798,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_rows_int-float_nan_data]",
                "duration": 27.125605499990343,
                "run_index": 231,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007379999951808713,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 27.12359689999721,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005326000027707778,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_rows_str-int_data]",
                "duration": 4.267652300004556,
                "run_index": 232,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007433999999193475,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 4.265617900004145,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005476000005728565,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_rows_str-float_nan_data]",
                "duration": 26.662413400008518,
                "run_index": 233,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008289000033983029,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 26.66019750000123,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005581000004895031,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_columns_int-int_data]",
                "duration": 3.535666300005687,
                "run_index": 234,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006894000034662895,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.533727000001818,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005604999969364144,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_columns_int-float_nan_data]",
                "duration": 25.311028099997202,
                "run_index": 235,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006850999998277985,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 25.30907849999494,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005794000026071444,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_columns_str-int_data]",
                "duration": 3.6553884000022663,
                "run_index": 236,
                "setup": {
                    "name": "setup",
                    "duration": 0.000702199999068398,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.65333660000033,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000647400003799703,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_axis[over_columns_str-float_nan_data]",
                "duration": 28.477496200001042,
                "run_index": 237,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008842000024742447,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 28.47509970000101,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006280999950831756,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_True-drop_True-int_data]",
                "duration": 3.9764377000101376,
                "run_index": 238,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009219000057782978,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.9738826000029803,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1082: in test_set_index\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:756: in _get_ilevel_values\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\algorithms.py:1708: in take_nd\n    indexer = ensure_int64(indexer, copy=False)\npandas\\_libs\\algos_common_helper.pxi:93: in pandas._libs.algos.ensure_int64\n    ???\nE   TypeError: __array__() takes 1 positional argument but 2 were given"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0007112999956007116,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_True-drop_True-float_nan_data]",
                "duration": 52.04098249999515,
                "run_index": 239,
                "setup": {
                    "name": "setup",
                    "duration": 0.0009353999994345941,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 52.03845149999688,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1082: in test_set_index\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:756: in _get_ilevel_values\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\algorithms.py:1708: in take_nd\n    indexer = ensure_int64(indexer, copy=False)\npandas\\_libs\\algos_common_helper.pxi:93: in pandas._libs.algos.ensure_int64\n    ???\nE   TypeError: __array__() takes 1 positional argument but 2 were given"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006601999994018115,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_True-drop_False-int_data]",
                "duration": 3.382326600010856,
                "run_index": 240,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007803000044077635,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.3801874999990105,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1082: in test_set_index\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:756: in _get_ilevel_values\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\algorithms.py:1708: in take_nd\n    indexer = ensure_int64(indexer, copy=False)\npandas\\_libs\\algos_common_helper.pxi:93: in pandas._libs.algos.ensure_int64\n    ???\nE   TypeError: __array__() takes 1 positional argument but 2 were given"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000578500003030058,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_True-drop_False-float_nan_data]",
                "duration": 51.460878400015645,
                "run_index": 241,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008646000060252845,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 51.45849520000047,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1082: in test_set_index\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:756: in _get_ilevel_values\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\algorithms.py:1708: in take_nd\n    indexer = ensure_int64(indexer, copy=False)\npandas\\_libs\\algos_common_helper.pxi:93: in pandas._libs.algos.ensure_int64\n    ???\nE   TypeError: __array__() takes 1 positional argument but 2 were given"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006540000031236559,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_True-drop_None-int_data]",
                "duration": 3.183566300001985,
                "run_index": 242,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007053000008454546,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.1814635999980965,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1082: in test_set_index\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:756: in _get_ilevel_values\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\algorithms.py:1708: in take_nd\n    indexer = ensure_int64(indexer, copy=False)\npandas\\_libs\\algos_common_helper.pxi:93: in pandas._libs.algos.ensure_int64\n    ???\nE   TypeError: __array__() takes 1 positional argument but 2 were given"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006921000021975487,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_True-drop_None-float_nan_data]",
                "duration": 47.46662479999213,
                "run_index": 243,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007251999995787628,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 47.46449629999552,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1082: in test_set_index\n    df_equals(modin_result, pandas_result)\nmodin\\pandas\\test\\utils.py:527: in df_equals\n    assert_frame_equal(\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:756: in _get_ilevel_values\n    filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\algorithms.py:1708: in take_nd\n    indexer = ensure_int64(indexer, copy=False)\npandas\\_libs\\algos_common_helper.pxi:93: in pandas._libs.algos.ensure_int64\n    ???\nE   TypeError: __array__() takes 1 positional argument but 2 were given"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006780999974580482,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_False-drop_True-int_data]",
                "duration": 3.650659999999334,
                "run_index": 244,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007774999976390973,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.648539100002381,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005659000016748905,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_False-drop_True-float_nan_data]",
                "duration": 37.4405684999947,
                "run_index": 245,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007723999951849692,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 37.438328700001875,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006950000024517067,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_False-drop_False-int_data]",
                "duration": 3.519672799993714,
                "run_index": 246,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007570999950985424,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.5175891000035335,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005694999999832362,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_False-drop_False-float_nan_data]",
                "duration": 37.615937899994606,
                "run_index": 247,
                "setup": {
                    "name": "setup",
                    "duration": 0.00079600000026403,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 37.613748299998406,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005975999956717715,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_False-drop_None-int_data]",
                "duration": 3.5498618000056013,
                "run_index": 248,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008624000038253143,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.5475655999980518,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005713999998988584,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_False-drop_None-float_nan_data]",
                "duration": 38.38355540000339,
                "run_index": 249,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007614999994984828,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 38.38138590000017,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006465000042226166,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_None-drop_True-int_data]",
                "duration": 3.5990088999897125,
                "run_index": 250,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008794999957899563,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.5966757999995025,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005740999986301176,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_None-drop_True-float_nan_data]",
                "duration": 37.55979279999883,
                "run_index": 251,
                "setup": {
                    "name": "setup",
                    "duration": 0.000760499999159947,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 37.557692399997904,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005794000026071444,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_None-drop_False-int_data]",
                "duration": 3.519198400012101,
                "run_index": 252,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007437000022036955,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.517136600006779,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005744000009144656,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_None-drop_False-float_nan_data]",
                "duration": 37.65706620000128,
                "run_index": 253,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007629000028828159,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 37.65494779999426,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005926000012550503,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_None-drop_None-int_data]",
                "duration": 3.6804526999985683,
                "run_index": 254,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007518999991589226,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.6783835999958683,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005653000043821521,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_set_index[append_None-drop_None-float_nan_data]",
                "duration": 37.897093999999925,
                "run_index": 255,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007611999972141348,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 37.894930100002966,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006415000025299378,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_shape[int_data]",
                "duration": 3.2549195000028703,
                "run_index": 256,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005916000009165145,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.253224500003853,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005117999971844256,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_shape[float_nan_data]",
                "duration": 18.8635654000027,
                "run_index": 257,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005870000022696331,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.861866599996574,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005248000015853904,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_size[int_data]",
                "duration": 3.06780289998278,
                "run_index": 258,
                "setup": {
                    "name": "setup",
                    "duration": 0.000581299995246809,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.066049599998223,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005906999940634705,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_size[float_nan_data]",
                "duration": 19.02648890001001,
                "run_index": 259,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006095000062487088,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 19.024700800000574,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005690999969374388,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_squeeze",
                "duration": 0.28665399998862995,
                "run_index": 260,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005138999986229464,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.28505549999681534,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1140: in test_squeeze\n    df_equals(modin_df_2, pandas_df_2)\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000570699994568713,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_transpose[int_data]",
                "duration": 5.862973799994506,
                "run_index": 261,
                "setup": {
                    "name": "setup",
                    "duration": 0.000585299996600952,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 5.861207699999795,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1181: in test_transpose\n    df_equals(modin_df.T.nunique(), pandas_df.T.nunique())\nmodin\\pandas\\test\\utils.py:540: in df_equals\n    assert_series_equal(df1, df2, check_dtype=False, check_series_type=False)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\_testing.py:744: in _check_types\n    assert_attr_equal(\"dtype\", left, right, obj=obj)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\pandas\\core\\dtypes\\inference.py:68: in is_number\n    return isinstance(obj, (Number, np.number))\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:98: in __instancecheck__\n    return _abc_instancecheck(cls, instance)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\abc.py:102: in __subclasscheck__\n    return _abc_subclasscheck(cls, subclass)\nE   TypeError: issubclass() arg 1 must be a class"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005955000015092082,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_transpose[float_nan_data]",
                "duration": 26.527918400002818,
                "run_index": 262,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005638000002363697,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 26.526138699999137,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1179: in test_transpose\n    df_equals(modin_df.T.dropna(), pandas_df.T.dropna())\nmodin\\pandas\\test\\utils.py:502: in df_equals\n    assert False\nE   AssertionError"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006521000032080337,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_update[data0-other_data0]",
                "duration": 0.25635329999931855,
                "run_index": 263,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008672999974805862,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.25400010000157636,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006186000027810223,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_update[data1-other_data1]",
                "duration": 0.20061319999513216,
                "run_index": 264,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006599999978789128,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.19862000000284752,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0006731999965268187,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test_update[data2-other_data2]",
                "duration": 0.17727169999852777,
                "run_index": 265,
                "setup": {
                    "name": "setup",
                    "duration": 0.0007900999989942648,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 0.17515180000191322,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005396999986260198,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___neg__[int_data]",
                "duration": 3.2359579999974812,
                "run_index": 266,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006006999974488281,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2342272000023513,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005294000002322719,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___neg__[float_nan_data]",
                "duration": 18.579788000002736,
                "run_index": 267,
                "setup": {
                    "name": "setup",
                    "duration": 0.00090230000205338,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.577332599998044,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1222: in test___neg__\n    modin_result = modin_df.__neg__()\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2909, in __neg__\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.00065080000058515,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___invert__[int_data]",
                "duration": 3.3072212999977637,
                "run_index": 268,
                "setup": {
                    "name": "setup",
                    "duration": 0.0008385999972233549,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.3050207999986014,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005233000047155656,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___invert__[float_nan_data]",
                "duration": 18.379971500005922,
                "run_index": 269,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005952999999863096,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.37819880000461,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005821000013384037,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___hash__",
                "duration": 3.0642614000025787,
                "run_index": 270,
                "setup": {
                    "name": "setup",
                    "duration": 0.0004669999980251305,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0627346000037505,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1246: in test___hash__\n    pass\nE   Failed: DID NOT WARN. No warnings of type (<class 'UserWarning'>,) was emitted. The list of emitted warnings is: []."
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000592800002777949,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___delitem__[int_data]",
                "duration": 3.412585999991279,
                "run_index": 271,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005820000005769543,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.4108930999937,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005288999964250252,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___delitem__[float_nan_data]",
                "duration": 24.613272899994627,
                "run_index": 272,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005822999955853447,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 24.611553900002036,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005544000014197081,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___nonzero__[int_data]",
                "duration": 3.037966600015352,
                "run_index": 273,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005864000049768947,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0362650000024587,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005288000029395334,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___nonzero__[float_nan_data]",
                "duration": 18.307923399988795,
                "run_index": 274,
                "setup": {
                    "name": "setup",
                    "duration": 0.0006158999967738055,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.306110499994247,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005811000009998679,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___abs__[int_data]",
                "duration": 3.2911196000059135,
                "run_index": 275,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005801000006613322,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.2893603000047733,
                    "outcome": "passed"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.0005990999998175539,
                    "outcome": "passed"
                },
                "outcome": "passed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___abs__[float_nan_data]",
                "duration": 18.244275299999572,
                "run_index": 276,
                "setup": {
                    "name": "setup",
                    "duration": 0.0005920999974478036,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 18.242575200005376,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1291: in test___abs__\n    modin_result = abs(modin_df)\nmodin\\experimental\\cloud\\rpyc_proxy.py:413: in method\n    return remote(_self.__remote_end__, *_args, **_kw)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:253: in __call__\n    return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\netref.py:76: in syncreq\n    return conn.sync_request(handler, proxy, *args)\nmodin\\experimental\\cloud\\rpyc_proxy.py:160: in sync_request\n    return super().sync_request(handler, *args)\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py:469: in sync_request\n    return self.async_request(handler, *args, timeout=timeout).value\nC:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\async_.py:102: in value\n    raise self._obj\nE   _get_exception_class.<locals>.Derived: object is not a numeric data type\nE   \nE   ========= Remote Traceback (1) =========\nE   Traceback (most recent call last):\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 320, in _dispatch_request\nE       res = self._HANDLERS[handler](self, *args)\nE     File \"C:\\Users\\alozovsk\\Anaconda3\\envs\\modin\\lib\\site-packages\\rpyc\\core\\protocol.py\", line 593, in _handle_call\nE       return obj(*args, **dict(kwargs))\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 2798, in __abs__\nE       return self.abs()\nE     File \"C:\\prog\\modin\\modin\\pandas\\base.py\", line 506, in abs\nE       self._validate_dtypes(numeric_only=True)\nE     File \"C:\\prog\\modin\\modin\\pandas\\dataframe.py\", line 2680, in _validate_dtypes\nE       raise TypeError(\"{0} is not a numeric data type\".format(t))\nE   TypeError: object is not a numeric data type"
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.000515899999300018,
                    "outcome": "passed"
                },
                "outcome": "failed"
            },
            {
                "name": "modin/pandas/test/dataframe/test_map_metadata.py::test___round__",
                "duration": 3.1123575999881723,
                "run_index": 277,
                "setup": {
                    "name": "setup",
                    "duration": 0.0004554999977699481,
                    "outcome": "passed"
                },
                "call": {
                    "name": "call",
                    "duration": 3.0870466999986093,
                    "outcome": "failed",
                    "longrepr": "modin\\pandas\\test\\dataframe\\test_map_metadata.py:1298: in test___round__\n    pd.DataFrame(data).__round__()\nE   Failed: DID NOT WARN. No warnings of type (<class 'UserWarning'>,) was emitted. The list of emitted warnings is: []."
                },
                "teardown": {
                    "name": "teardown",
                    "duration": 0.024399899994023144,
                    "outcome": "passed"
                },
                "outcome": "failed"
            }
        ],
        "summary": {
            "failed": 136,
            "passed": 142,
            "num_tests": 278,
            "duration": 36352.44200849533
        },
        "created_at": "2021-07-22 10:10:48.598460"
    }
}